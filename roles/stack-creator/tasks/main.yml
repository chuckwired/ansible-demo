---
# Deploys a simple stack from your localhost, 2x EC2 and 1x ELB
# 1x nginx on EC2, 1x app on EC2
# 
# Variables: 
#   - nginx_instance_name: name tag for the nginx EC2
#   - app_instance_name: name tag for the app EC2
#   - elb_instance_name: tag name for the ELB
#   - deployment_region: region to deploy to
#

- name: Check that hose has boto installed
  shell: pip list | grep boto
  register: pip_list_boto # 0 == found, 1 == not found 
  changed_when: False

- name: Installing boto
  shell: pip install boto
  when: "pip_list_boto == 0"

- name: Get local IP for SSH access
  shell: curl checkip.amazonaws.com
  register: local_ip

- name: Create the EC2 security group
  ec2_group:
    name: chuck-demo-vpc-sg
    description: Demonstration for VPC Security Group Creation
    region: "{{ deployment_region }}"
    state: present
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp 
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ local_ip.stdout }}/32" # Access just for me for now
    rules_egress:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0

- name: Ensure existence of NGINX EC2 instance.
  ec2:
    key_name: chuck-demo
    instance_type: t1.micro
    image: ami-9ca595e8
    wait: yes
    group: chuck-demo-vpc-sg
    exact_count: 1
    count_tag:
      Name: "{{ nginx_instance_name }}"
    region: "{{ deployment_region }}"
    instance_tags: '{"Name":"{{ nginx_instance_name }}"}'

# - name: Ensure existence of Application EC2 instance."
#   ec2:
#     key_name: chuck-demo
#     instance_type: t1.micro
#     image: ami-9ca595e8 #ami-24506250 
#     wait: yes
#     group: chuck-demo-vpc-sg
#     exact_count: 1
#     count_tag:
#       Name: "{{ app_instance_name }}"
#     region: "{{ deployment_region }}"
#     instance_tags: '{"Name":"{{ app_instance_name }}"}'

- name: Ensure the load balancer exists
  local_action:
   module: ec2_elb_lb
   name: "{{ elb_instance_name }}"
   region: "{{ deployment_region }}"
   state: present
   zones:
     - eu-west-1a
     - eu-west-1b
     - eu-west-1c
   listeners:
     - protocol: http # options are http, https, ssl, tcp
       load_balancer_port: 80
       instance_port: 80
     - protocol: http
       load_balancer_port: 443
       instance_protocol: http # optional, defaults to value of protocol setting
       instance_port: 80
       # ssl certificate required for https or ssl
       # ssl_certificate_id: "arn:aws:iam::123456789012:server-certificate/company/servercerts/ProdServerCert"